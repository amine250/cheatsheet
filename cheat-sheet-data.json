[
  {
    "category": "Linux Commands",
    "items": [
      { "title": "Find file by name in current directory", "content": "find . -maxdepth 2 -name \"file\"" },
      { "title": "List open network sockets of a process", "content": "netstat -aonp | grep <process_name>" },
      { "title": "Save file as root without leaving vim", "content": ":w !sudo tee %" },
      { "title": "Find string then replace in all files of current dir", "content": "find . -type f -name '*' -exec sed -i 's\/original\/replacement\/g' {} \\;" },
      { "title": "Setup Proxy", "content": "export {HTTP,HTTPS,FTP}_PROXY=127.0.0.1:8080\nexport {http,https,ftp}_proxy=127.0.0.1:8080" },
      { "title": "Push a runnning command's process to the background", "content": "ctrl-z + jobs + bg + disown (id)" },
      { "title": "Compress Extract using tar", "content": "tar -cvJpf archive.tar.xz directory # compress directory\ntar -xvJf archive.tar.xz -C directory # extract to directory" }
    ]
  },
  {
    "category": "Bash Snippets",
    "items": [
      { "title": "Trust company certificate inside WSL and Python for AWS CLI", "content": "echo quit | openssl s_client -showcerts -servername \"eu-west-1.signin.aws.amazon.com\" -connect eu-west-1.signin.aws.amazon.com:443 > cacert.crt\nsudo cp cacert.crt \/usr\/local\/share\/ca-certificates\/cacert.crt\nsudo update-ca-certificates\npip3 config set global.cert \/etc\/ssl\/certs\/ca-certificates.crt" }
    ]
  },
  
  {
    "category": "Windows",
    "items": [
      { "title": "Windows God Mode", "content": "Create a folder named:\nGodMode.{ED7BA470-8E54-465E-825C-99712043E01C}" }
    ]
  },
  {
    "category": "Git Commands",
    "items": [
      { "title": "Cherry pick a commit from a different git project", "content": "git remote add other https:\/\/example.link\/repository.git\ngit fetch other\ngit cherry-pick <commit-id>" }
    ]
  },
  {
    "category": "Kubernetes",
    "items": [
      { "title": "Expose kubernetes pod locally", "content": "# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\nkubectl port-forward pod/mypod 8888:5000" },
      { "title": "Stop a deployment's pod without restarting", "content": "kubectl scale deployment <deployment> --replicas=0" },
      { "title": "Unbound a pv to make available to be claimed", "content": "kubectl patch pv pv-name -p '{\"spec\":{\"claimRef\": null}}'" },
      { "title": "Delete a PVC protected by a finalizer", "content": "kubectl patch pvc PVC_NAME -p '{\"metadata\":{\"finalizers\": []}}' --type=merge" }
    ]
  },
  {
    "category": "Docker",
    "items": [
      { "title": "Docker stats", "content": "docker stats $(docker ps --format={{.Names}}) --no-stream" }
    ]
  },
  {
    "category": "Terraform",
    "items": [
      { "title": "placeholder", "content": "placeholder" }
    ]
  },
  {
    "category": "Amazon Web Services (AWS)",
    "items": [
      { "title": "CloudWatch Filter to see WAF blocked requests by hostname", "content": "{ ($.Action = \"BLOCK\") && ($.Request.Headers[0].Value = \"www.hostname.com\") }" },
      { "title": "Athena WAF filter by ratebasedruleid", "content": "SELECT from_unixtime(timestamp \/ 1000e0), * FROM \"db\".\"table\"\nWHERE day >= '2021\/10\/03\/00' AND day < '2021\/11\/29\/08'\nAND webaclid = 'xxxxx'\nAND element_at(ratebasedrulelist, 1).ratebasedruleid = 'yyyyy'" }
    ]
  }
]
